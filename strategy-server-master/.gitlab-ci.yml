variables:
  VAULT_ADDR: http://vault.utils.svc.cluster.local:8200
  CHARTS_PATH: /deploy/charts
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_DRIVER: overlay2
  CACHE_KEY: ${CI_PROJECT_NAME}

stages:
  - tests
  - build
  - deploy

.before_script:
  before_script:
  - |
    if [[ "$CI_COMMIT_TAG" == "" ]]; then
      export IMAGE_TAG="$CI_COMMIT_REF_SLUG"
    else
      export IMAGE_TAG="$CI_COMMIT_TAG"
    fi
  - echo "DOCKER REGISTRY IMAGE >> $DOCKER_REGISTRY_IMAGE:$IMAGE_TAG"

.deploy_scripts:
  stage: deploy
  image: registry.digitalocean.com/tencoins/infra:latest
  extends: .before_script
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab_deploy jwt=$CI_JOB_JWT_V1)"
    - vault kv get -field=kubeconfig utils/gitlab_deploy/common | base64 -d > ~/.kube/config && chmod 400 ~/.kube/config
    - helm upgrade --install ${CI_PROJECT_NAME} -n ${K8S_NAMESPACE}
      --values ${CHARTS_PATH}/${CI_PROJECT_NAME}/values.yaml
      --values ${CHARTS_PATH}/${CI_PROJECT_NAME}/values-${CI_ENVIRONMENT_NAME}.yaml
      --set image.tag=${IMAGE_TAG}
      --set image.repository=${DOCKER_REGISTRY_IMAGE}
      --set env.GITHASH=${CI_COMMIT_SHA}
      ${CHARTS_PATH}/${CI_PROJECT_NAME}

.tests:
  image: node:16.14
  stage: tests
  services:
    - name: postgres:13
      alias: postgres
  variables:
    POSTGRES_DB: strategy_server_local_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DB_HOST: postgres
    DB_PORT: 5432
    DB_DATABASE: $POSTGRES_DB
    DB_USERNAME: $POSTGRES_USER
    DB_PASSWORD: $POSTGRES_PASSWORD
  only:
    - branches
  cache:
    key: ${CACHE_KEY}
    paths:
    - node_modules/
  tags:
    - kubernetes
  allow_failure: false

test:unit:
  extends: .tests
  script:
    - npm i
    - npm run test

test:evm:
  extends: .tests
  script:
    - npm i
    - npm run test:evm

test:lint:
  extends: .tests
  script:
    - npm i
    - npm run lint

build:
  image: registry.digitalocean.com/tencoins/infra:latest
  stage: build
  extends: .before_script
  services:
    - docker:19.03-dind
  script:
    - echo $DOCKER_REGISTRY_PASS | docker login -u $DOCKER_REGISTRY_USER $DOCKER_REGISTRY_HOST --password-stdin
    - docker build
      --tag "$DOCKER_REGISTRY_IMAGE:$IMAGE_TAG"
      --file Dockerfile .
    - docker push "$DOCKER_REGISTRY_IMAGE:$IMAGE_TAG"
    - echo "DOCKER REGISTRY IMAGE >> $DOCKER_REGISTRY_IMAGE:$IMAGE_TAG"
  tags:
    - kubernetes

deploy:alpha:
  extends: .deploy_scripts
  variables:
    K8S_NAMESPACE: alpha
  environment:
    name: alpha
    url: https://strategy-server.alpha.tencoins.info
  when: manual
  tags:
    - kubernetes

deploy:beta:
  extends: .deploy_scripts
  variables:
    K8S_NAMESPACE: beta
  environment:
    name: beta
    url: https://strategy-server.beta.tencoins.info
  when: manual
  tags:
    - kubernetes

deploy:delta:
  extends: .deploy_scripts
  variables:
    K8S_NAMESPACE: delta
  environment:
    name: delta
    url: https://strategy-server.delta.tencoins.info
  when: manual
  tags:
    - kubernetes

deploy:staging:
  extends: .deploy_scripts
  variables:
    K8S_NAMESPACE: staging
  environment:
    name: staging
    url: https://strategy-server.staging.tencoins.info
  when: manual
  allow_failure: false
  only:
    - tags
  tags:
    - kubernetes

deploy:production:
  extends: .deploy_scripts
  variables:
    K8S_NAMESPACE: bolide
  environment:
    name: prod
    url: https://strategy-server.ennlo.com
  when: manual
  needs: ["deploy:staging"]
  only:
    - tags
  tags:
    - k8s-prod
